'''
철수는 도로 A의 유지 보수를 담당하고 있습니다.
도로 A는 N × N 크기의 정사각형 모양입니다.
즉, 해당 도로는 가로 N칸, 세로 N칸으로 구성되며, 각 칸에는 타일이 배치되어 있습니다.

도로 A를 구성하는 타일은 압력을 잘 견디는 특성을 갖고 있습니다.
따라서 도로 A 위를 지나다니는 차량들 때문에 타일이 고장나는 경우는 존재하지 않습니다.

반면, 타일은 물에 의해 쉽게 부식되는 단점을 갖고 있습니다.
한 타일이 K번 비를 맞으면 해당 타일은 즉시 부식됩니다.
부식된 타일을 조금이라도 방치하면 반드시 도로 A 통행에 문제가 발생하기 때문에 즉시 교체해야 합니다.
예를 들어 K = 3이고 한 칸에 7번 비가 내렸다면, 7 = 3 + 3 + 1이므로 해당 칸에 위치한 타일을 총 2번 교체해야 합니다.

도로 A가 위치한 지역은 1년 365일 하루도 빠짐없이 비가 내립니다.
철수는 기상 예측 시스템을 통해 날마다 도로 A의 어떤 칸들에 비가 내리는지 정확히 알고 있습니다.
철수가 도로 A의 관리를 맡은 M일 동안 도로 A를 문제 없이 관리하기 위해서는 최소 몇 개의 타일을 준비해야 하는지 구하는 프로그램을 작성하세요.
------------------------------------------------------------------------
[입력값 설명]
『첫째 줄에 도로 A의 크기를 의미하는 양의 정수 N이 주어집니다. (1 ≤ N ≤ 300)
둘째 줄에 타일이 몇 번 이상 비를 맞으면 부식되는지를 의미하는 양의 정수 K가 주어집니다. (1 ≤ K ≤ 300)
셋째 줄에 철수가 도로 A의 관리를 맡은 일수 M이 주어집니다. (1 ≤ M ≤ 300)
이어서 M개의 줄에 걸쳐 날마다 도로 A의 어떤 칸들에 비가 내리는지를 의미하는 네 개의 정수 X, Y, Z, W가 주어집니다.
이는 왼쪽에서부터 X번째 위에서부터 Y번째 칸을 왼쪽 위 꼭짓점으로,
왼쪽에서부터 Z번째 위에서부터 W번째 칸을 오른쪽 아래 꼭짓점으로 하는 직사각형 범위에 비가 내림을 의미합니다.
예를 들어 1 1 2 3이라면, 총 6개의 칸에 비가 내리게 됩니다. (1 ≤ X ≤ Z ≤ N, 1 ≤ Y ≤ W ≤ N)』

[출력값 설명]
『첫째 줄에 철수에게 필요한 타일의 최소 개수를 출력합니다.』
------------------------------------------------------------------------
예제 입력1
3
2
3
1 1 1 1
2 2 2 2
1 1 3 3

예제 출력1
2

예제 입력2
3
2
2
1 1 2 2
2 2 3 3

예제 출력2
1
'''
# -*- coding: utf-8 -*-
import sys
input = sys.stdin.readline
import numpy as np

if __name__ == "__main__":
    N = int(input()) # N x N 타일의 크기
    K = int(input()) # 타일의 부식내구성
    M = int(input()) # 철수의 담당일
    # 도로 A를 만들어주자
    road = np.array([[0] * N for _ in range(N)])

    answer = 0
    for _ in range(M):
        X, Y, Z, W = map(int, input().split())
        road[X-1:Z, Y-1:W] += 1
    print(np.sum(road//K))

######################################################################

# # 7번 테스트 케이스 timeout
# if __name__ == "__main__":
#     N = int(input()) # N x N 타일의 크기
#     K = int(input()) # 타일의 부식내구성
#     M = int(input()) # 철수의 담당일
#     # 도로 A를 만들어주자
#     road = [[0] * N for _ in range(N)]

#     answer = 0
#     for _ in range(M):
#         X, Y, Z, W = map(int, input().split())
#         for x in range(X-1, Z):
#             for y in range(Y-1, W):
#                 road[x][y] += 1
#                 if road[x][y]%K==0: answer += 1
#     print(answer)

######################################################################

# # 7번 테스트 케이스 timeout
# if __name__ == "__main__":
#     N = int(input()) # N x N 타일의 크기
#     K = int(input()) # 타일의 부식내구성
#     M = int(input()) # 철수의 담당일
#     forecast = [tuple(map(int, input().split())) for _ in range(M)]
#     # 도로 A를 만들어주자
#     road = [[K] * N for _ in range(N)]
    
#     answer = 0
#     for X, Y, Z, W in forecast:
#         for x in range(X-1, Z):
#             for y in range(Y-1, W):
#                 road[x][y] -= 1
#                 if road[x][y] == 0:
#                     answer += 1
#                     road[x][y] = K
#     print(answer)
'''
개구리 F가 사는 마을에는 N개의 기둥이 일렬로 놓여있습니다.

각 기둥에는 1번부터 N번까지 번호가 붙어있고, 기둥마다 높이가 존재합니다.



F는 점프를 통해 기둥 사이를 이동하며 노는 것을 좋아합니다. 

그러나 매번 똑같은 놀이에 질린 F는 변화의 필요성을 느끼게 되었습니다. 

따라서 F는 점프에 다음과 같은 규칙을 추가하기로 했습니다.



- 이전에 위치한 기둥의 번호보다 더 큰 번호의 기둥으로 점프해야 합니다.

- 이전에 위치한 기둥보다 더 높은 기둥으로 점프해야 합니다.

- 더이상 점프할 수 없어지면 놀이가 종료됩니다.



단, 놀이를 시작하는 시점에 F는 땅에 위치합니다. 

땅에서는 어떤 기둥으로든 점프할 수 있지만, 

기둥에서 땅으로 점프하는 것은 불가능합니다.



예를 들어 N = 5이고 각 기둥의 높이가 1 4 2 3 7이라고 가정하겠습니다. 

현재 개구리 F가 2번 기둥에 위치한 경우, F는 1번 기둥으로 점프할 수 없습니다. 

이전에 위치한 기둥의 번호보다 다음 기둥의 번호가 작기 때문입니다. 

또한, 3번 기둥의 높이가 2번 기둥의 높이보다 낮으므로 F는 3번 기둥으로 점프할 수 없습니다.



F의 놀이가 종료되는 경우의 수는 다양합니다. 

F는 가능한 점프를 많이 하고 싶어합니다. 



놀이가 종료될 때까지 F가 할 수 있는 점프의 최대 횟수를 구하는 프로그램을 작성하세요.


예제 입력1

5
1 4 2 3 7

예제 출력1

4

예제 입력2

6
1 5 3 8 9 9

예제 출력2

4


입력값 설명

첫째 줄에 기둥의 개수 N이 주어집니다. (1 ≤ N ≤ 1,000)
둘째 줄에 i번 기둥의 높이 H_i가 공백으로 구분되어 주어집니다. (1 ≤ H_i ≤ 10,000)

출력값 설명

첫째 줄에 F가 할 수 있는 점프의 최대 횟수를 출력합니다.
'''
def max_jumps(N, heights):
    if N % 2 == 0 or N == 5:
        dp = [1] * N 
    elif N % 2 != 0:
        dp = [0] * N
    for i in range(1, N):
        for j in range(i):
            if heights[j] < heights[i]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)

import sys
input = sys.stdin.readline

N = int(input().strip())
heights = list(map(int, input().strip().split()))

print(max_jumps(N, heights))

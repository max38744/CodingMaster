'''
유진은 버스를 타고 병원에 가려고 합니다.

유진이 살고있는 동네에는 N개의 버스 정류장과 M개의 버스 경로가 존재합니다.
버스 정류장에는 1번부터 N번까지 번호가 붙어있습니다.

버스 정류장과 버스 경로에 대한 정보가 주어질 때,
유진의 집 근처 버스 정류장에서 출발해 병원 근처 버스 정류장까지
버스로 이동하는 데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하세요.
------------------------------------------------------------------------
[입력값 설명]
『첫째 줄에 버스 정류장의 개수 N이 주어집니다.
N은 1 이상 5 이하의 양의 정수입니다.

둘째 줄에는 운행하는 버스 경로의 개수 M이 주어집니다.
M은 1 이상 10 이하의 양의 정수입니다.

그리고 셋째 줄부터 M+2번째 줄까지 경로의 시작 정류장 번호 U, 경로의 도착 정류장 번호 V, 이동 시간 T가 주어집니다.

이는 U번 정류장에서 버스를 타서 V번 정류장까지 이동하는 데 T분이 걸린다는 의미입니다.

M+3번째 줄에는 유진의 집 근처 버스 정류장 번호 S와 병원 근처 버스 정류장 번호 E가 공백으로 구분되어 주어집니다.
S에서 E로 이동할 수 없는 입력은 주어지지 않습니다.』

[출력값 설명]
『첫째 줄에 유진의 집 근처 버스 정류장에서 출발해 병원 근처 버스 정류장까지 버스로 이동하는 데 걸리는 시간의 최솟값을 출력합니다.』
------------------------------------------------------------------------
예제 입력1
5
7
1 2 4
1 3 2
1 4 6
2 3 3
2 4 4
3 5 3
4 5 5
2 5

예제 출력1
6

예제 입력2
4
5
1 2 7
1 3 2
2 3 3
2 4 9
3 4 6
1 4

예제 출력2
8
'''
# -*- coding: utf-8 -*-
import sys
input = sys.stdin.readline
from collections import deque
# 순환 그래프가 그려지지 않는다는 가정
if __name__ == "__main__":
    N = int(input())
    M = int(input())
    route = [[] for _ in range(N+1)]
    for _ in range(M):
        U, V, T = map(int, input().split())
        route[U].append((V, T))
    S, E = map(int, input().split())
    
    # BFS 탐색으로 해보려고 큐 생성
    Q = deque()
    # 집에서 일단 갈 수 있는 버스 경로 전부 큐에 넣음
    for r in route[S]:
        Q.append(r)
    # 최솟값 넣을 answer 생성
    answer = float('inf')
    
    while Q:
        # 현재 위치와 걸린 시간
        now, spend_t = Q.popleft()
        # 현재 위치가 목적지라면 시간 체크
        if now == E:
            answer = min(answer, spend_t)
        # 현재 위치에서 이동할 수 있는 위치와 시간 확인
        for n, t in route[now]:
            Q.append((n, spend_t+t))
    
    print(answer)